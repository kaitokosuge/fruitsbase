// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  username      String?   
  name          String    @unique
  bio           String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String    @unique
  Quiz          Quiz[]
  Category    Category[]
  User_Attempt User_Attempt[]
  Quiz_Like Quiz_Like[]
  User_Correct User_Correct[]
  Category_color Category_color[]
  Follower Follower[] @relation("UserFollowers")
  Following Follower[] @relation("UserFollowing")
}

model Quiz {
  id          String   @id @default(cuid())
  question    String   @db.Text
  explanation String   @db.Text
  author      User     @relation(fields: [authorId], references: [id],onDelete: Cascade)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Option      Option[]
  Category_Quiz Category_Quiz[]
  User_Attempt User_Attempt[]
  Quiz_Like Quiz_Like[]
  User_Correct User_Correct[]
  Category_Like Category_Like[]
}

model Option {
  id          String   @id @default(cuid())
  option      String
  is_correct  Boolean
  quiz        Quiz     @relation(fields: [quizId], references: [id],onDelete: Cascade)
  quizId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id              String   @id @default(cuid())
  name            String   @unique 
  author          User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId        String?
  Category_Quiz   Category_Quiz[]
  Category_Like   Category_Like[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Category_color  Category_color[]
}

model Category_color {
  id              String   @id @default(cuid())
  category        Category  @relation(fields: [categoryId], references: [id],onDelete: Cascade)
  categoryId      String
  author          User     @relation(fields: [authorId], references: [id],onDelete: Cascade)
  authorId        String
  color           String
  sub_color       String? 
}

model Category_Like {
  user            Quiz      @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId          String
  category        Category  @relation(fields: [categoryId], references: [id],onDelete: Cascade)
  categoryId      String
  @@id([userId, categoryId])
}

model Category_Quiz{
  quiz            Quiz      @relation(fields: [quizId], references: [id],onDelete: Cascade)
  quizId          String
  category        Category  @relation(fields: [categoryId], references: [id],onDelete: Cascade)
  categoryId      String
  @@id([quizId, categoryId])
}

model User_Attempt {
  id              String   @id @default(cuid())
  quiz            Quiz     @relation(fields: [quizId], references: [id],onDelete: Cascade)
  quizId          String
  user            User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId          String
  createdAt       DateTime @default(now())
}

model User_Correct {
  quiz            Quiz     @relation(fields: [quizId], references: [id],onDelete: Cascade)
  quizId          String
  user            User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId          String
  createdAt       DateTime @default(now())
  @@id([quizId, userId])
}

model Quiz_Like {
  quiz            Quiz     @relation(fields: [quizId], references: [id],onDelete: Cascade)
  quizId          String
  user            User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId          String
  createdAt       DateTime @default(now())
  @@id([quizId, userId])
}

model Follower {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowing", fields: [followingId], references: [id])

  @@unique([followerId, followingId]) 
}
